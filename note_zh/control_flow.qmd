# 控制流

控制流是编程语言中用于控制程序执行顺序的机制。它允许程序根据条件或其他因素来决定执行哪些代码块。

在 Python 中，常见的控制流结构包括：

- 条件语句（`if-else` 语句）
- 循环语句（`for` 循环和 `while` 循环）
- 跳转语句（`break` 语句和 `continue` 语句）

`if-else` 语句用于在满足特定条件时执行特定的代码块。

`for` 循环和 `while` 循环是 Python 中的循环结构，`for` 循环用于遍历可迭代对象中的元素，`while` 循环用于在条件为真时重复执行代码块。

`break` 语句和 `continue` 语句是 Python 的跳转语句，`break` 语句用于在满足特定条件时结束循环，`continue` 语句用于在满足特定条件时跳过此次循环的剩余部分，直接进入下一次循环。

控制流的灵活性使得程序能够根据不同的条件和需求来执行不同的操作，从而实现更复杂的逻辑和功能。

## `if` 语句

条件语句允许根据条件的真假来执行不同的代码块。`if` 语句用于执行条件为真时的代码块，而 `else` 语句用于执行条件为假时的代码块。

```python
# 示例代码来源： A Byte of Python
# 我们这里先定义一下猜测的值，而非通过input来获取值
# 这是由于Quarto和Jupyter Notebook这类环境无法处理中间输入（input）
# 这两个环境都被设计为批量执行代码的模式，一旦所有的cell开始执行，它们就能完成所有的运行，无需人工干预
# 所以，我们这里直接设定一个值，而非通过input来获取这个值
guess = 20

number = 23

print('你的猜测是：', guess)

if guess == number:
    print('恭喜你，你猜对了。')
    print('（但你没有赢得任何奖品！）')
elif guess < number:
    # 另一个代码块
    print('不对，它比那个数稍微大一点')
    # 你可以在代码块中做任何你想做的事情...
else:
    print('不对，它比那个数稍微小一点')
    # 你必须猜大于number才能到达这里

print('完成')
# 这个最后的语句总是会被执行，
# 在if语句执行之后。

# 如果你想在其他环境（如标准Python环境或IDLE）中获得用户输入，
# 你可以将第五行的代码改为 "guess = int(input('请输入一个整数：'))"。
# 这样就能接收用户的输入作为 'guess' 的值，然后进行后续的判断。
```

示例代码中的知识点：

- `input` 函数会将一个字符串打印到屏幕上并等待输入，在输入内容后，`input()` 函数会将输入的内容作为一个字符串返回。
- `int` 是一个类，在这里它用于将字符串转换为整数。如果需要转化为浮点数则用 `float`。
- 缩进级别用于将语句分类为不同的代码块。应当遵循一致的缩进原则。
- `if`，`elif` 和 `else` 语句在逻辑行的末尾必须有一个冒号，后面跟着对应的代码块。
- `elif` 语句是将两个相关的 `if` `else-if` `else` 合并成一个组合的 `if-elif-else` 语句。可以简化程序和缩进量。
- 可以在一个 `if` 语句里嵌套另一个 `if` 语句，这被称为嵌套的 `if` 语句。
- `elif` 和 `else` 语句是可选的。一个 `if` 可以在只有 `if` 部分的情况下生效。

## `while`语句

`while`语句允许在条件为真时重复执行一组语句。`while`语句是一种循环语句，可以包括一个可选的`if`语句。

```python
# 示例代码来源： A Byte of Python
number = 23
running = True

# 由于我们无法在Quarto或Jupyter环境中使用input()函数，这里我们设定了一个预设的猜测值列表
guesses = [20, 25, 23]
guesses_iter = iter(guesses)  # 创建一个迭代对象

while running:
    # 在Quarto和Jupyter环境中，'input()' 函数需要改写为从预设列表中迭代猜测值
    guess = next(guesses_iter)
    print('你的猜测是：', guess)

    if guess == number:
        # 如果猜测值等于设定值，则输出猜对了，并终止while循环
        print('恭喜你，你猜对了。')
        running = False
    elif guess < number:
        # 结果也会显示预设猜测值偏小
        print('不对，它比那个数稍微大一点')
    else:
        # 结果也会显示预设猜测值偏大
        print('不对，它比那个数稍微小一点')

print('完成')

# 迭代器 'guesses_iter' 遍历完所有guesses后，程序就会结束
# 在实际的Python环境或IDLE中运行时，你可以取消 'guess = next(guesses_iter)' 这一行的注释
# 并将 'guess = int(input('请输入一个整数 : '))' 这一行注释去掉，将 'guesses' 与 'guesses_iter'注释掉
# 这样就能通过用户输入来获取猜测值，并通过持续的while循环来实现用户的持续猜测
```

示例代码中的知识点：

- 在 `while` 循环之前将变量 `running` 设置为 `True`，程序会先检查变量 `running` 是否为 `True`，然后继续执行相应的 `while` 块。
- 执行完块之后，再次检查条件（即变量 `running`）。
- 如果条件为真，则再次执行 `while` 块。
- 如果条件为假，则执行可选的 `else` 块，然后继续下一条语句。
- 如果 `while` 循环有一个 `else` 子句，除非使用 `break` 语句跳出循环，否则它总是会被执行。
- `True` 和 `False` 被称为布尔类型，可以分别视作值 1 和 0 的等价物。

## `for` 循环

`for..in` 语句是另一种循环语句，它遍历一个对象序列，即逐个遍历序列中的每个项目。

就现在的进度，序列可以被视作一个有序的项目集合。

```python
# 示例代码来源： A Byte of Python
for i in range(1, 5):
    print(i)
else:
    print('for循环结束')
```

示例代码中的知识点：

- 内置函数 `range` 可以生成数字序列。
- 默认情况下，`range` 的步长为 1。给 `range` 提供的第三个数字将成为步长，例如 `range(1,5,2)` 给出了 `[1,3]`。不包括第二个数字（即结尾数字）。
- `range` 一次只生成一个数字，如果需要完整的数字列表需要调用 `list()`。
- `for` 循环中的 `else` 部分是可选的。若包含，除非使用 `break` 语句跳出循环，否则它总是会被执行。
- 尽管示例代码仅演示了数字列表，但 `for` 循环适用于任何类型的对象构成的序列。

## `break` 语句

`break` 语句被称为跳转语句，可以停止执行循环语句，即使循环条件尚未为 False 或者项的序列尚未完全迭代完成。

如果跳出一个 `for` 或 `while` 循环，相应的循环 `else` 块不会被执行。

```python
# 示例代码来源： A Byte of Python
# 设定预设的输入列表
inputs = ['你好', 'abcdef', '12345', '退出']

# 创建一个迭代器
inputs_iter = iter(inputs)

while True:
    # 从预设的输入列表中获取输入
    s = next(inputs_iter)

    print('输入的字符串是: ', s)
    if s == '退出':
        break
    print('字符串的长度是', len(s))
print('完成')

# 这里我们通过预设的输入列表和迭代器来模拟用户的输入
# 在每次循环中，我们从列表中获取一个输入，并检查这个输入是否等于'退出'，如果是就结束循环
# 否则，我们就输出这个输入的长度
# 这样就可以在Quarto或Jupyter这类不支持`input()`函数的环境中运行，如果在实际的Python环境或IDLE中运行时，
# 可以将 's = next(inputs_iter)' 这一行注释掉，将 's = input('输入点什么: ')' 这一行的注释去掉，
# 同时将 'inputs' 与 'inputs_iter' 注释，即可恢复到原先的状态。
```

示例代码中的知识点：

- 内置的 `len` 函数可以测量输入字符串的长度。
- `break` 语句也可以与 `for` 循环一起使用。

## `continue` 语句

`continue` 语句用于跳过当前循环块中的其余语句，并继续下一次循环的迭代。

```python
# 示例代码来源： A Byte of Python
# 设定预设的输入列表
inputs = ['你好', 'abcdef', '12', '1234', '退出']

# 创建一个迭代器
inputs_iter = iter(inputs)

while True:
    # 从预设的输入列表中获取输入
    # s = input('输入点什么: ')
    s = next(inputs_iter)

    print('输入的字符串是: ', s)
    if s == '退出':
        break
    if len(s) < 3:
        print('太短了')
        continue
    print('输入长度足够')
    # 你可以在代码块中做任何你想做的事情...
print('完成')

# 这段代码在Quarto和Jupyter环境下都能够顺利运行。在每次循环中，它会从预设的字符串列表中获取一个输入，然后根据这个输入的长度执行不同的操作：
# 1. 如果输入是'退出'，那么它会结束整个循环；
# 2. 如果输入的长度小于3，那么它会打印'太短了'，并且跳过此次循环剩下的部分，直接开始下一次循环；
# 3. 如果输入的长度不小于3，那么它会打印'输入长度足够'。
# 可以将 's = next(inputs_iter)' 这一行注释掉，将 's = input('输入点什么: ')' 这一行的注释去掉，
# 同时将 'inputs' 与 'inputs_iter' 注释，即可恢复到原先的状态。
```
