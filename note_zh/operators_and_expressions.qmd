# 运算符和表达式

运算符是用于执行特定操作的符号或关键字。在Python中，有多种类型的运算符，包括算术运算符、比较运算符、逻辑运算符等。

操作数是运算符所操作的数据。

表达式是由运算符和操作数组成的组合，用于计算和生成值。在Python中，表达式可以是简单的算术表达式，也可以是复杂的逻辑表达式。

例如，一个表达式的示例是`2 + 3`,其中运算符为`+`,操作数为`2`，`3`。


## 运算符
### 算术运算符：

- 加法运算符（`+`）：用于将两个值相加。可以处理数值，字符串和列表等类型。
- 减法运算符（`-`）：用于将一个值减去另一个值。如果第一个操作数缺失，默认为0。
- 乘法运算符（`*`）：用于将两个值相乘。用于处理字符串时，则返回重复固定次数的字符串。
- 除法运算符（`/`）：用于将一个值除以另一个值。
- 取模运算符（`%`）：用于计算两个值相除的余数。
- 幂运算符（`**`）：用于计算一个值的指数。
- 整除运算符（`//`）：用于计算两个值相除的整数部分。答案会向下取整到最近的整数值；如果其中有操作数是浮点数，则答案会是浮点数。


```python
# 加法运算符
x1 = 2 + 3
print(x1)
x2 = "a" + "b"
print(x2)
# 减法运算符
y1 = 3 - 2
print(y1)
y2 = - 2
print(y2)
# 乘法运算符
a1 = 5 * 6
print(a1)
a2 = "my" * 6
print(a2)
# 除法运算符
b = 50 / 25
print(b)
# 取模运算符
c1 = 26 % 3
print(c1)
c2 = -25.5 % 2.25
print(c2)
# 幂运算符
d= 2 ** 3
print(d)
# 整除运算符
e1 = 28 // 3
print(e1)
e2 = 9//1.8
print(e2)
```
### 比较运算符：

- 等于运算符（`==`）：用于检查两个值是否相等。
- 不等于运算符（`!=`）：用于检查两个值是否不相等。
- 大于运算符（`>`）：用于检查一个值是否大于另一个值。
- 小于运算符（`<`）：用于检查一个值是否小于另一个值。
- 大于等于运算符（`>=`）：用于检查一个值是否大于或等于另一个值。
- 小于等于运算符（`<=`）：用于检查一个值是否小于或等于另一个值。

```python
a = 1 == 1
print(a)
b = 1 != 1
print(b)
c = 2 > 1
print(c)
d = 2 < 1
print(d)
e = 2 >= 2
print(e)
f = 1 <= 2
print(f)
```
### 逻辑运算符（布尔运算符）：

- 与运算符（`and`）：用于检查多个条件是否同时为真。只有当所有条件都为真时，结果才为真。
- 或运算符（`or`）：用于检查多个条件是否至少有一个为真。只要有一个条件为真，结果就为真。
- 非运算符（`not`）：用于对条件进行取反。

```python
# 与运算符（and）：只有当所有条件都为真时，结果才为真
a = True and True
print(a)  # 输出：True

b = True and False
print(b)  # 输出：False

# 或运算符（or）：只要有一个条件为真，结果就为真
c = True or False
print(c)  # 输出：True

d = False or False
print(d)  # 输出：False

# 非运算符（not）：对条件进行取反
e = not True
print(e)  # 输出：False

f = not False
print(f)  # 输出：True
```


#### 短路评估：

当使用逻辑运算符（如`and`和`or`）连接多个条件表达式时，Python会根据运算符的特性来决定是否对所有条件进行求值。
- `and`运算中，只要任意一个条件为False，则整个表达式必然为False，此时Python会停止计算后面的值并立刻返回False。
- `or`运算中，只要任意一个条件为True，则整个表达式必然为True，此时Python会停止计算后面的值并立刻返回True。
-
短路评估可以提高代码的效率和性能，避免了不必要的运算和求值。

```python
# 短路评估的示例
a = 4
b = 0

if b != 0 and a / b < 1:
    print("条件满足")
else:
    print("条件不满足")
```

在上面的示例中，通过短路评估，在`b != 0 `这一步判断整体结果为False，进而跳过执行后面的`a / b`的除以0运算，避免了出现错误。如果不适用短路评估，会先判断`b != 0 `为False，进而执行除法运算，会出现除以0错误。

#### 优先级

每个运算符都有不同的优先级，其中 `not` 在 `and` 和 `or` 之前进行评估。括号可以用来在其他部分之前评估表达式的一部分。

在Python中，所有的布尔运算符的优先级都低于比较运算符，比较运算符的优先级低于算术运算符。

### 位运算符：

位（bit）：存储、处理数据的最小单位。一位只能存储0或1这两个可能的值。计算机中的数字以二进制（即由0和1组成）的方式储存。

位移：位移是用来修改数字位值的操作。位移分为左移和右移，左移是在原数右边添加一个0，右移是把最右边一位去掉。

- 在十进制中，向左移动一位（即在尾部添加一个0）表示乘以10，向右移动一位（即去掉尾部的数字）表示除以10。
- 在二进制中，向左移动一位（即在尾部添加一个0）表示乘以2，向右移动一位（即去掉尾部的数字）表示除以2。

位运算符

- 按位与运算符（`&`）：用于对两个值进行按位与操作。如果对应的两个二进制位都为1，则该位的结果值为1，否则0。
- 按位或运算符（`|`）：用于对两个值进行按位或操作。如果对应的两个二进制位有一个为1，则该位的结果值为1，否则0。
- 按位异或运算符（`^`）：用于对两个值进行按位异或操作。如果对应的两个二进制位一个为1，另一个为0，则该位结果值为1，否则0（即同为0或者同为1则结果为0）
- 按位取反运算符（`~`）：用于对一个值进行按位取反操作。对一个二进制数按位取反，即将0变1，1变0。x的按位取反是-(x+1)。
- 左移运算符（`<<`）：用于将一个值向左移动指定的位数。
- 右移运算符（`>>`）：用于将一个值向右移动指定的位数。

位运算符是操作二进制位的，不过在实际的编程过程中，使用并不频繁，所以在此处我只给出了简单的解释和例子。

```python
# 定义两个变量
a = 60  # 60的二进制表示为0011 1100
b = 13  # 13的二进制表示为0000 1101

print(a, "的二进制表示为", bin(a))
print(b, "的二进制表示为", bin(b))

print("a & b =", a & b)  # 按位与运算。二进制结果0000 1100，对应十进制为12
print("a | b =", a | b)  # 按位或运算。二进制结果0011 1101，对应十进制为61
print("a ^ b =", a ^ b)  # 按位异或运算。二进制结果0011 0001，对应十进制为49
print("~a =", ~a)  # 按位取反运算。二进制结果1100 0011，对应十进制为-61（注意：是负数）

print("a << 2 =", a << 2)  # 左移2位运算。二进制结果1111 0000，对应十进制为240
print("a >> 2 =", a >> 2)  # 右移2位运算。二进制结果0000 1111，对应十进制为15

```
### 赋值运算符：
- 简单赋值运算符（`=`）：用于将一个值赋给一个变量。
- 加法赋值运算符（`+=`）：用于将一个值与一个变量相加，并将结果赋给该变量。
- 减法赋值运算符（`-=`）：用于将一个值从一个变量中减去，并将结果赋给该变量。
- 乘法赋值运算符（`*=`）：用于将一个值与一个变量相乘，并将结果赋给该变量。
- 除法赋值运算符（`/=`）：用于将一个值除以一个变量，并将结果赋给该变量。
- 取模赋值运算符（`%=`）：用于计算两个值相除的余数，并将结果赋给一个变量。
- 幂赋值运算符（`**=`）：用于计算一个值的指数，并将结果赋给一个变量。
- 整除赋值运算符（`//=`）：用于计算两个值相除的整数部分，并将结果赋给一个变量。

```python
# 简单赋值运算符（=）
a = 10
print("a =", a)  # 输出：a = 10

# 加法赋值运算符（+=）
a += 2
print("a =", a)  # 输出：a = 12

# 减法赋值运算符（-=）
a -= 2
print("a =", a)  # 输出：a = 10

# 乘法赋值运算符（*=）
a *= 2
print("a =", a)  # 输出：a = 20

# 除法赋值运算符（/=）
a /= 2
print("a =", a)  # 输出：a = 10.0

# 取模赋值运算符（%=）
a %= 3
print("a =", a)  # 输出：a = 1.0

# 幂赋值运算符（**=）
a **= 3
print("a =", a)  # 输出：a = 1.0

# 整除赋值运算符（//=）
a = 10
a //= 3
print("a =", a)  # 输出：a = 3

```
## 表达式

表达式是由运算符和操作数组成的组合，用于计算和生成值。

在Python中，表达式可以是简单的算术表达式，也可以是复杂的逻辑表达式。

例如，以下是一些常见的表达式示例：

- 算术表达式：2 + 3 * 4
- 逻辑表达式：(x > 5) and (y < 10)
- 字符串拼接表达式：'Hello' + 'World'
- 列表推导式：[x for x in range(10) if x % 2 == 0]

表达式的值可以根据操作数的类型和运算符的规则进行计算。在计算表达式时，Python会按照一定的优先级和结合性来确定运算的顺序。

### 计算顺序

类似数学中的乘法优先级高于加法优先级，Python里的表达式也存在优先级之分。Python会先计算优先级较高的运算符和表达式，然后再计算优先级较低的表达式。

对于复杂的表达式，虽然可以依靠记忆优先级规则来确保正确的运算顺序，但是为了代码的清晰和易读，一般建议显性地使用括号来标明运算顺序。

在运算符具有相同的优先级时，计算顺序由它们的结合性确定。结合性可以是左结合或右结合。

- 左结合意味着从左到右进行计算。常见的例子包括算术运算符（如加法、减法、乘法、除法等）、比较运算符和大多数位运算符。
- 右结合意味着从右到左进行计算。常见的例子包括指数运算符、赋值运算符（`=`）和复合赋值运算符（如`+=`、`-=`、`*=`、`/=`、`%=`、`**=`、`//=`、`&=`、`^=`、`>>=`、`<<=`）。


### 数学运算和赋值的快捷方式

常见的做法是对变量进行数学运算，然后将运算结果赋值给变量，因此对于这种表达式有一个快捷方式。

```python
a = 2
a = a * 3
print("a =", a)

b = 2
b *= 3
print("b =", b)
```
