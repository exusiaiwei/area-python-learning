# 输入和输出
在编程过程中，用户交互是常见而且必要的一部分。Python提供了一些简单易用的函数和方法，使我们能够进行输入和输出操作，比如获取用户的输入，输出结果到屏幕，生成和处理文件等。

## 用户输入
`input()` 函数接受一个字符串作为参数，并将其显示给用户。然后它等待用户输入并按下回车键。一旦用户输入并按下回车键， `input()` 函数将返回用户输入的文本。

一些注意事项：

- `input()` 函数总是返回一个字符串。如果你需要一个整数，你需要使用 `int()` 函数将返回的字符串转换为整数。
- `input()` 函数总是返回一个字符串。如果你需要一个浮点数，你需要使用 `float()` 函数将返回的字符串转换为浮点数。
- `input()` 函数可以不带参数直接使用，这时它将只显示一个简单的冒号提示符，等待用户输入。也可以带一个字符串作为参数，这个字符串将作为提示信息显示给用户。
- 使用 `input()` 函数时，在用户输入内容并按下回车键之前，程序会暂停运行，也就是被阻塞。
  - 如果你要输入密码或其他敏感信息，可能希望用户输入的内容不被显示出来。这时可以使用 `getpass` 模块中的 `getpass()` 函数。

下面是一些示例代码：


```python
# 例子1
name = input("What is your name? ")
print("Hello, " + name + "!")
```

```python
# 例子2
def reverse(text):
    return text[::-1]

def is_palindrome(text):
    return text == reverse(text)
something = input("Enter text: ")
if is_palindrome(something):
    print("Yes, it is a palindrome")
else:
    print("No, it is not a palindrome")
```

```python
# 例子3
import getpass
password = getpass.getpass("Enter your password: ")
if password == "12345":
    print("Access granted")
else:
    print("Access denied")
```


```python
# 例子4
def reverse(text):
    return text[::-1]
def is_palindrome(text):
    return text == reverse(text)

something = input("Enter text: ")
filtered_something = ''.join(c for c in something if c.isalnum()).lower()
if is_palindrome(filtered_something):
    print("Yes, it is a palindrome")
else:
    print("No, it is not a palindrome")
```
以上的示例代码中有以下几个要点：

- 例子1中，`input()` 函数带有一个字符串参数，这个字符串作为提示信息显示给用户。
- 例子2中，`input()` 函数带有一个字符串参数，这个字符串作为提示信息显示给用户。用户输入的内容被传递给 `reverse()` 函数和 `is_palindrome()` 函数。
- 例子2中，我们使用切片功能来反转字符串。`text[::-1]` 返回一个反转的字符串。切片的语法是 `text[start:end:step]`。默认值是 `start=0`，`end=len(text)`，`step=1`。给定一个负的 `step` 值，意味着从右向左切片，也即反转字符串。
- 例子3中，我们使用 `getpass` 模块中的 `getpass()` 函数来获取用户输入的密码。这个函数不会显示用户输入的内容。
- 例子4中，我们使用了 `isalnum()` 方法来检查字符串中是否只包含字母和数字。`isalnum()` 方法返回 `True` 如果字符串中只包含字母和数字，否则返回 `False`。`join()` 方法将一个字符串列表连接起来，返回一个新的字符串。

## 文件

Python提供了一些内置的函数和方法，使我们能够创建、打开、读写文件。这些操作主要通过内置的 `open()` 函数和文件对象的方法来实现。

以下是一些常见的文件操作：

1. `open` 函数：这事一个内建函数，用于打开一个文件，并返回一个文件对象。
   1. `open` 函数接受两个参数：文件名（必须）和模式（可选）。
   2. 模式参数是一个字符串，用于指定文件的打开模式。默认值是 `r`，表示只读模式。还包括 `w`（写入模式）、`a`（追加模式）、`r+`（读写模式）等。
   3. `w` 模式会创建一个新文件，如果文件已经存在，它将被覆盖。
   4. 在`r`模式下，文件对象的方法只能用于读取文件内容。在`w`模式下，文件对象的方法只能用于写入文件内容。在`a`模式下，文件对象的方法只能用于追加文件内容。
   5. 如果想要在写入一些内容之后立即读取，需要以读写模式（如`r+`或`w+`）打开文件。
2. `read` 方法：用于读取文件内容。
   1. `read` 方法接受一个整数作为参数，用于指定要读取的字节数。如果没有指定参数，`read()` 方法将读取整个文件。
   2. 在读取或写入文件内容后，文件对象的指针将移动到文件的末尾。如果要再次读取文件内容，需要使用 `seek` 方法将文件指针移动到文件的开头。
3. `write` 方法：用于写入文件内容。这个方法接受一个字符串作为参数，将这个字符串写入文件。
4. `close` 方法：用于关闭文件。关闭文件后，任何对文件对象的操作都将失败。

以下是一些示例代码：

```python
file1 = open(r"practical_code\input_and_output\myfile.txt", "r")
content = file1.read()
print(content)
file1.close()
```

```python
file2 = open(r"practical_code\input_and_output\myfile2.txt", "w")
file2.write("This is a test")
file2.close()
```

当进行文件操作时，应始终注意在操作结束后关闭文件。为了更有效地管理文件资源，Python提供了 `with` 语句，它可以自动关闭文件。以下是一个示例：

```python
with open(r"practical_code\input_and_output\myfile.txt", "r") as file:
    content = file.read()
    print(content)
```

以下是一个更复杂的示例：

```python
poem = '''\
Programming is fun
When the work is done
if you wanna make your work also fun:
    use Python!
'''
f = open(r"practical_code\input_and_output\poem.txt", "w")
f.write(poem)
f.close()

f = open(r"practical_code\input_and_output\poem.txt", "r")
while True:
    line = f.readline()
    if len(line) == 0:
        break
    print(line, end='')
f.close()
```

在这个示例代码中：

- 我们首先使用 `open` 函数创建一个文件对象，然后使用 `write` 方法写入一些内容。
- 使用`readline` 方法读取文件内容。`readline` 方法每次读取一行内容，并返回一个字符串。当到达文件末尾时，`readline` 方法将返回一个空字符串，即 `len(line) == 0`。这时我们使用 `break` 语句退出循环。
- 我们使用 `end=''` 参数来避免在每行的末尾添加一个新的空行。

## Pickle模块
Pickle是一个Python标准模块，它是Python中用于对象序列化和反序列化的一个重要模块。

通过Pickle模块，Python对象结构可以转化为一个字节流，这个字节流包含了重建原来对象的所有必要信息。转化为字节流的过程被称为"pickling"，而从字节流恢复对象的过程被称为"unpickling"。

`Pickle`可以处理几乎所有的Python对象，包括函数、类、甚至是用户自定义的对象。

"持久化存储对象"这个概念，通常指的是将内存中的对象状态保存到持久化存储媒介，如硬盘、数据库或者远程服务器等，然后在稍后的时间，即使原程序已经停止，也可以将这些数据重新读取到内存中，恢复为对象。


Pickle模块的功能就是持久化存储对象的重要手段之一。通过pickle模块，我们可以将内存中的Python对象转化为字节流，然后将这些字节流存储在文件，数据库或通过网络发送到其他地方。当我们需要的时候，可以通过unpickling操作，重新将这些字节流转化回Python对象。

使用pickle模块进行pickling和unpickling的主要方法有：

- `pickle.dumps(obj)`：将Python对象转化为字节流。
- `pickle.dump(obj, file)`：将Python对象转化为字节流，并将这些字节流写入文件。
- `pickle.loads(bytes_object)`：从一个字节字符串中恢复对象。
- `pickle.load(file)`：从文件中读取字节流，并将这些字节流转化为Python对象。

下面是这个模块一些基本使用示例：

```python
import pickle

data = {
    'a': [1, 2.0, 3, 4+6j],
    'b': ("character string", b"byte string"),
    'c': {None, True, False}
}

with open(r"practical_code\input_and_output\data.pkl", "wb") as f:
    pickle.dump(data, f)

with open(r"practical_code\input_and_output\data.pkl", "rb") as f:
    restored_data = pickle.load(f)
print(restored_data)
```

在这个示例中，我们首先使用 `pickle.dump` 方法将一个Python对象转化为字节流，并将这些字节流写入文件。然后我们使用 `pickle.load` 方法从文件中读取字节流，并将这些字节流转化为Python对象。

## Unicoin字符和编码

在Python 3中，字符串是Unicode字符串。Unicode是一个标准，它定义了世界上所有文字的字符集。Unicode字符集包含了世界上所有的文字，包括中文、日文、希腊文、西里尔文等。每个字符都有一个唯一的Unicode码点，这个码点是一个整数。

编码和解码：

- 将Unicode字符转化为字节流的过程被称为编码。在Python中，我们可以使用 `encode` 方法将Unicode字符串编码为字节流
- 将字节流转化为Unicode字符的过程被称为解码。可以使用 `decode` 方法将字节流解码为Unicode字符串。
- 一种常见的编码方式是UTF-8编码。
- 在编程时，如果我们需要处理非ASCII字符，我们应该始终使用Unicode字符串。这样，只有在需要将Unicode字符串转化为字节流时，我们才需要使用编码。

当我们编写一个使用Unicode字符的程序时，我们应该确保程序使用UTF-8编码。这样，我们的程序可以处理世界上所有的文字。


下面是一个处理Unicode字符的示例：

```python
import io

f = io.open(r"practical_code\input_and_output\zh_CN.txt", "wt", encoding="utf-8")
f.write(u"你好，世界！")
f.close()

text = io.open(r"practical_code\input_and_output\zh_CN.txt", encoding="utf-8").read()
print(text)
```

在这个示例代码中：

- 在Python 3中，`io.open` 函数的用法和 `open` 函数完全一样。
- 但是在Python 2中，`open` 函数不支持指定编码。在Python 2中，我们应该使用 `io.open` 函数来打开文件。
- 如果需要程序能同时兼容Python 2和Python 3，我们应该使用 `io.open` 函数来打开文件。但如果我们只需要兼容Python 3，出于简洁的考虑，我们可以只使用 `open` 函数。
