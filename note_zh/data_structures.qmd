# 数据结构

![python数据结构](fig/python_data_structure.png)

## 序列（Sequence）

在Python中，序列(Sequence)是最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。

Python有三种常见的序列类型：

- 列表（List）
- 元组（Tuple）
- 字符串（String）

另外三种非序列的数据结构是：

- 集合（Set）
- 字典（Dictionary）
- 冰冻集合（frozenset）

这三种类型并非有序，也不能通过索引访问元素。

## 列表（List）

Python 的列表类似于其他编程语言中的数组，但是比这些数组更灵活。列表中的元素不一定要是相同的数据类型。

列表用方括号 `[]` 包围元素，并用逗号 `,` 分割。

```python
my_list = [1, "apple", 3.14]
print(my_list[0]) # prints: 1
```

列表：

- 是有序的
- 是可变的
- 可以包含任何类型的元素
- 可以通过索引访问元素，索引从0开始

::: {.callout-tip}
## 索引
注意, Python的索引是从0开始。这意味着在使用索引访问列表元素时，列表中的第一个元素是 `list[0]`，第二个元素是 `list[1]`，以此类推。

此外，索引是前包含后不包含的。`word[1:3]`这样的索引意味着从索引1开始，直到索引3之前的元素（即索引1和2）。
:::


## 元组（Tuple）

元组是有序的、不可变的列表。可以理解为一种“只读”版本的列表。

元组用括号 `()` 包围元素，并用逗号 `,` 分割。

```python
my_tuple = (1, "apple", 3.14)
print(my_tuple[0]) # prints: 1
```

元组：

- 是有序的
- 是不可变的
- 可以包含任何类型的元素
- 可以通过索引访问元素，索引从0开始

下面是一个体现元组和列表的差别的代码示例
```python
# 创建一个列表
my_list = [1, 2, 3]
# 在列表末尾添加一个元素
my_list.append(4)
print(my_list[3])
# 创建一个元组
my_tuple = (1, 2, 3)
# 不能修改元组
# my_tuple.append(4)  # 这样会报错
```

## 集合（Set）

集合是非有序的数据结构，它不允许重复元素。

集合用花括号`{}`包围元素，并用逗号 `,` 分割。


```python
my_set = {1, "apple", 3.14, "apple"}
print(my_set) # prints: {1, "apple", 3.14}
```

集合:

- 是无序的
- 集合中元素不能重复
- 可以包含任何类型的元素
- 不能通过索引访问元素

## 字典（Dictionary）

字典是一个无序的键值对集合。

"键值对"（Key-Value Pair）指的是两个关联的部分：一个是唯一的键（Key），另一个是值（Value）。每个键都有一个关联的值。这种关联叫做"映射"。

字典使用花括号`{}`包围元素，键值之间用冒号`:`分隔，而键值对之间用逗号`,`分隔。

::: {.callout-tip}
# 为什么叫字典

在一本实体字典中，你可以根据词条（对应于计算机中的“键”）找到对应的解释或者翻译（对应于计算机中的“值”）。这构成了一个"词条-解释"对，与计算机科学中的"键-值对"类似。

因此，考虑到这种映射关系，计算机科学中的这种包含"键-值对"的数据结构，就被命名为字典（Dictionary）。
:::

```python
my_dict = {
    "name": "apple",
    "color": "red",
}
print(my_dict["name"]) # prints: apple

ages = {
    "Tom": 30,
    "Alice": 25,
    "Bob": 27
}

print(ages["Alice"]) # 输出：25
ages["Tom"] = 31  # 将Tom的年龄改为31
print(ages["Tom"]) # 输出：31

```


字典:

- 是无序的
- 键值对中的键是唯一的,但值可以重复
- 可以包含任何类型的元素
- 通过键来访问元素

当你使用一个键来访问一个字典时，Python会返回与该键相关联的值。如果你使用一个不存在的键，Python会引发一个`KeyError`异常。

为了避免这一点，可以使用`get()`方法。`get(key, default) `方法允许指定一个默认值，当字典中不存在指定的键时，它会返回该默认值而不是引发异常。

## 对象（Object）和类（Class）{#sec-objects-and-classes}

Python是一种面向对象的编程语言。在Python中，几乎所有的东西都是对象，拥有其属性和方法。类(Class)就是为创建对象的种类或类型提供了定义的一种机制。

对象(Object)：在Python中，对象是数据的核心单元。每个对象都具有一个类型（例如，字符串，列表，字典等），以及一个独一无二的身份（在内存中的地址）。对象可以包含包含多种数据（即属性）和功能（即方法）。它可以视为现实世界中的客观实体，比如一张桌子、一个圆形、一个人等。

举例来说，一个人（对象）有姓名（属性）和能进行各种活动（方法）如跑步、学习等。


类(Class)：类是对象的模板或蓝图。它定义了对象的基本结构，并封装了对象需要执行的行为（方法）。你可以定义一个类来创建属于这个类的对象。类就相当于制造物件的工厂，负责规定其生产出的对象应该拥有哪些特性。


举例来说，你可以定义一个“人”的类（class），它有名字和年龄等属性，也有吃饭，睡觉等方法。然后根据这个“人”类，我们可以创建不同的人对象，比如创建一个名叫“张三”、年龄25岁的人对象。

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def introduce(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

# 创建一个属于Person类的对象
someone = Person('张三', 25)

# 调用对象的方法
print(someone.introduce())

```

## 引用

在Python中，每当你创建一个对象并将其赋值给一个变量时，Python并不会将对象的值存储在变量中。相反，Python仅仅是将变量设置为一个引用，指向存储在内存中的对象。这种方式被称为绑定变量名到对象，或者叫做引用。

### 创建对象和引用


举个例子，当你创建一个列表并赋值给某个变量：

```python
list1 = [1, 2, 3]
```

此时，list1只是一个引用，它指向存储在内存中的一个列表对象，此对象包含元素1, 2, 3。如果你再创建一个引用，并指向同样的对象：

```python
list2 = list1
```

此时你有两个引用——list1和list2，它们同时指向同一个对象。


### 修改可变类型的对象


如果你通过其中一个引用去修改这个对象，例如你通过list1去删除第一个元素：

```python
del list1[0]
```
那么无论你是通过list1还是list2来访问这个列表对象，你都会发现的此对象的内容已经发生了变化：

```python
print(list1)  # 输出: [2, 3]
print(list2)  # 输出: [2, 3]
```
这是因为list1和list2都只是引用，它们并不包含实际的列表内容，而只是指向内存中的一个位置，即同一个列表对象的地址。


### 对象的复制


然而，有时你可能需要创建一个对象的副本，这样你就可以修改这个副本，而不影响原来的对象。例如，通过切片操作可以创建一个列表的副本：

```python
list3 = list2[:]
```
此时list3引用的是一个完全新的列表对象，这个对象的内容是list2所指向的列表的一个完全的拷贝。所以，当你更改list3的内容时，list2指向的列表内容不会被修改：

```python
del list3[0]
print(list2)  # 输出: [2, 3]
print(list3)  # 输出: [3]
```
