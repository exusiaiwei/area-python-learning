# Data Structures

## Sequence

In Python, the sequence is the most basic data structure. Each element in the sequence is assigned a number - its position, or index, with the first index being 0, the second index being 1, and so on.

Python has three common types of sequences:

- List
- Tuple
- String

The other three non-sequence data structures are:

- Set
- Dictionary
- Frozenset

These three types are not ordered and cannot be accessed via indexes.

## List

Python's list is similar to arrays in other programming languages, but they are more flexible. The elements in the list don't need to be of the same data type.

Lists are characterized by elements being surrounded by square brackets `[]` and separated by commas `,`.


```python
mylist = [1, "apple", 3.14]
print(mylist[0]) # prints: 1
```
List:

- Is ordered
- Is mutable
- Can contain elements of any type
- Elements can be accessed by index, with indexes starting from 0

::: {.callout-tip}
Note, Python's indexing starts from 0. This means that when accessing list elements using indexes, the first element in the list is `list[0]`, the second element is `list[1]`, and so on.
:::

## Tuple

A tuple is an ordered, immutable list. It can be understood as a "read-only" version of a list.

Tuples use parentheses `()` to enclose elements and are separated by commas `,`.

```python
my_tuple = (1, "apple", 3.14)
print(my_tuple[0]) # prints: 1
```

Tuples:

- Are ordered
- Are immutable
- Can contain elements of any type
- Elements can be accessed by index, with indexes starting from 0

Below is a code example illustrating the difference between tuples and lists.

```python
# Create a list
my_list = [1, 2, 3]
# Add an element to the end of the list
my_list.append(4)
print(my_list[3])
# Create a tuple
my_tuple = (1, 2, 3)
# You can't modify a tuple
# my_tuple.append(4)  # This would throw an error
```

## Set

A set is a non-ordered data structure that does not allow duplicate elements.

Sets enclose elements with curly braces `{}` and separate them with commas `,`.

```python
my_set = {1, "apple", 3.14, "apple"}
print(my_set) # prints: {1, "apple", 3.14}
```

Set:

- Is unordered
- Does not allow duplicate elements
- Can contain elements of any type
- Can not be accessed by indexes


## Dictionary

A dictionary is an unordered set of key-value pairs.

A "key-value pair" refers to two associated parts: one is a unique key, and the other is its value. Each key has an associated value. This association is called "mapping".

Dictionaries enclose elements with curly braces `{}`, separate keys and values with colons `:`, and key-value pairs with commas `,`.

::: {.callout-tip}
# Why called Dictionary

In a physical dictionary, you can find a corresponding explanation or translation (corresponding to the "value" in the computer) based on the entry (corresponding to the "key" in the computer). This constitutes an "entry-explanation" pair, similar to the "key-value pair" in computer science.

Therefore, considering this mapping relationship, this data structure containing "key-value pairs" in computer science is named Dictionary.
:::


```python
my_dict = {
    "name": "apple",
    "color": "red",
}
print(my_dict["name"]) # prints: apple

ages = {
    "Tom": 30,
    "Alice": 25,
    "Bob": 27
}

print(ages["Alice"]) # prints：25
ages["Tom"] = 31
print(ages["Tom"]) # prints：31

```

Dictionaries:

- Are unordered
- In key-value pairs, the key is unique, but the value can be duplicated
- Can contain elements of any type
- Elements are accessed by keys

## Object and Class {#sec-objects-and-classes}

Python is an object-oriented programming language. In Python, almost everything is an object with its properties and methods. A class provides a mechanism for defining the kind or type for creating objects.

Object: In Python, an object is a core unit of data. Each object has a type (such as a string, list, dictionary, etc.), and a unique identity (or address in memory). An object can contain various data (i.e., attributes) and functionalities (i.e., methods). It can be seen as an objective entity in the real world, such as a table, a circle, a person, etc.

For instance, a person (object) has a name (attribute) and can conduct various activities (methods) such as running, studying, etc.

Class: A class is a template or blueprint for objects. It defines the basic structure of an object and encapsulates the behaviors (methods) that an object needs to perform. You can define a class to create objects that belong to this class. A class is like a factory for making objects, responsible for specifying what features its products should have.

For example, you can define a class "Person" that has attributes like name and age, and methods like eating, sleeping, etc. Then based on this "Person" class, we can create different person objects, such as creating a person object named "Tom" that is 25 years old.

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def introduce(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

someone = Person('Tom', 25)

print(someone.introduce())

```

## References

In Python, whenever you create an object and assign it to a variable, Python does not store the object's value in the variable. Instead, Python simply sets the variable to be a reference that points to the object stored in memory. This is known as binding variable names to objects, or called references.

### Creating Objects and References


For example, when you create a list and assign it to a variable:

```python
list1 = [1, 2, 3]
```

At this point, list1 is just a reference that points to a list object stored in memory, which contains the elements 1, 2, 3. If you create another reference that points to the same object:

```python
list2 = list1
```

Now you have two references - list1 and list2, both pointing to the same object.


### Modifying Mutable Type Objects


If you modify the object through one of the references, for example deleting the first element through list1:

```python
del list1[0]
```
Then no matter whether you access this list object through list1 or list2, you will find that the content of this object has changed:

```python
print(list1)  # prints: [2, 3]
print(list2)  # prints: [2, 3]
```

This is because list1 and list2 are just references, they do not contain the actual list content themselves, but only point to a location in memory, which is the address of the same list object.


### Copying Objects


However, sometimes you may need to create a copy of an object, so that you can modify the copy without affecting the original object. For example, you can create a copy of a list through slice operation:

```python
list3 = list2[:]
```

Now list3 references a completely new list object, whose content is a complete copy of the list that list2 points to. So when you change the content of list3, the content of the list that list2 points to will not be modified:

```python
del list3[0]
print(list2) # prints: [2, 3]
print(list3) # prints: [3]
```