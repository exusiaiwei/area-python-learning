# Object-Oriented Programming

Object-Oriented Programming (OOP) is a programming paradigm where the main ideas are to encapsulate data and operations on data into objects, abstract similar objects into classes, and achieve code reuse and modularization through encapsulation, inheritance and polymorphism of classes.

## Review of Objects and Classes

We have already introduced the concepts of objects and classes in @sec-objects-and-classes. We can summarize as follows:

- Class: A class is an abstract description of a category of things. It defines the static attributes (fields) and dynamic behaviors (methods) of such things. A class is the template for creating objects and an object is an instance of a class.
- Object: An object is an instance of a class, i.e. an entity created based on the class definition. Each object has its own attributes (class variables and instance variables) and behaviors (methods).
- Attribute: Attributes are characteristics of a class or object, including static attributes (fields) and dynamic behaviors (methods).
- Method: Methods are part of a class definition. Methods define the dynamic behaviors of objects, describing how objects can respond to external requests or how to accomplish specific tasks.

::: {.callout-tip}
Similar to structural functionalism - in object-oriented programming, the fields of an object are like its "structure" while the methods are like its "functions".
:::

## Class Construction (Functional Part)

A simplest class looks like:
```python
class Person:
    pass  # An empty block

p = Person()
print(p)
```
We use the `class` statement and class name to create a new class, followed by an indented block of statements that make up the body of the class. Here, the `pass` statement denotes an empty block since Python block statements cannot be empty.

Appending parentheses after the class name creates an object/instance. In the example code, we confirm the object is created by printing it out with the `print(p)` statement. The print result indicates this object is a `Person` class instance in the `__main__` module.

Class construction is mainly achieved by defining methods of the class. Methods describe operations that can be performed by the class or its instances. In Python we often define methods inside the class, just like defining normal functions.


### Methods: Functional Implementation of Classes

Classes and objects can have methods just like functions, the only difference being the first parameter of methods is `self`.

Below is a simple example of class methods:

```python
class Person:
    def say_hi(self):
        print('Hello, how are you?')

p = Person()
p.say_hi()
```
### The Role of `self` in Class Methods

In Python, the first parameter of class methods is usually a special parameter called `self`, representing the instance that owns the method, or in other words, the instance that will call this method. Through the self parameter, methods can freely access and modify fields and other methods of the object.

::: {.callout-tip}
When defining class methods, we don't know beforehand which instance object will call this method in the future. So we need a parameter (conventionally called `self`) to receive the runtime passed-in instance object, so that this method can access properties of the instance or call other instance methods.
:::

```python
class Dog:
    def __init__(self, name):
        self.name = name

    def bark(self):
        return f"{self.name} says woof!"

d1 = Dog("Fido")
d2 = Dog("Rex")

print(d1.bark())  # Prints "Fido says woof!"
print(d2.bark())  # Prints "Rex says woof!"

```

When an instance calls its method, the Python interpreter automatically passes the instance itself to the `self` parameter of the method. Through `self`, we can access and modify instance attributes within the method.

In this example, the `bark()` method gets called on instances `d1` and `d2`, so `self` represents the calling instance respectively, hence `self.name` returns the `name` attribute of `d1` and `d2` respectively. Each time a method gets called, Python automatically passes in the current object instance as the first argument.

::: {.callout-caution}

```
rex.bark()
```

Here when we call `rex.bark()`, seemingly we did not provide any parameters to the `bark` method. But actually, the Python interpreter automatically passes the `rex` instance to `bark` method's `self` parameter. This is why there is always a `self` parameter at the beginning of class methods, and usually we don't need to explicitly provide this parameter when calling methods.

Similarly, this also means that even for a parameter-less method, it still needs one parameter - `self`.
:::


### The `__init__` Method: Class Constructor

In Python we often define a special method called `__init__` in classes, which is called the constructor method of the class. When we create a new instance from a class, the Python interpreter automatically invokes the `__init__` method to initialize the newly created instance.

::: {.callout-tip}
# Magic Methods

The `__init__` method name is surrounded by double underscores, meaning it's a special method with special significance.

Such methods prefixed and suffixed by double underscores in Python are usually called "magic methods". These methods get invoked automatically by the Python interpreter, usually we don't need to explicitly call them.
:::

The first parameter of the `__init__` method is always `self`, i.e. a reference to the object itself. In the `__init__` method we can set initial state of the instance, for example, assigning some initial attribute values.

Below is an example of a class with an `__init__` method:

```python
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

my_dog = Dog('Willy', 5)

```
In this example, the `Dog` class has an `__init__` method taking three parameters: `self`, `name` and `age`. For the `self` parameter, as we know, Python provides it automatically when we create class instances. The other parameters (`name` and `age`) need to be provided when creating the object.

The `__init__` method is usually used to initialize state of the object during object creation. By setting object attributes in `__init__` method, we can ensure objects have certain initial states once created.


## Fields (Structural Part)


Variables defined inside a class or object are called fields, used to describe state or properties of objects. The aforementioned static attributes refer to fields of a class or object.

::: {.callout-caution}
**Attribute = Field + Method**
:::

Fields are variables bound to the namespace of the class or object, so these names are only valid within context of the class and object.

There are two types of fields:

- Class variables: Belonging to the class, all object instances share this one variable. Modifying it on one object affects all objects.
- Instance variables: Belonging to the object, each object instance has its own copy. Modifying it on one object does not affect others.

Below is an example for understanding class variables and instance variables:

```python
class Robot:
    """Represents a robot, with a name."""

    # A class variable, counting the number of robots
    population = 0

    def __init__(self, name):
        """Initializes the data."""
        self.name = name
        print("(Initializing {})".format(self.name))

        # When this person is created, the robot
        # adds to the population
        Robot.population += 1

    def die(self):
        """I am dying."""
        print("{} is being destroyed!".format(self.name))

        Robot.population -= 1

        if Robot.population == 0:
            print("{} was the last one.".format(self.name))
        else:
            print("There are still {:d} robots working.".format(
                Robot.population))

    def say_hi(self):
        """Greeting by the robot.

        Yeah, they can do that."""
        print("Greetings, my masters call me {}.".format(self.name))

    @classmethod
    def how_many(cls):
        """Prints the current population."""
        print("We have {:d} robots.".format(cls.population))


droid1 = Robot("R2-D2")
droid1.say_hi()
Robot.how_many()

droid2 = Robot("C-3PO")
droid2.say_hi()
Robot.how_many()

print("\nRobots can do some work here.\n")

print("Robots have finished their work. So let's destroy them.")
droid1.die()
droid2.die()

Robot.how_many()
```

In this example:

- `population` is a class variable, used to keep track number of robots.
- `name` is an instance variable, used to store robot's name.
- `__init__` method is a special method used to initialize robot's name.
- `how_many` is a class method, used to print current number of robots. We decorate `how_many` as a class method.
- `die` is an instance method, used to represent robot destruction.
- All class members are public here. Names prefixed with a single underscore `_` indicate protected names that should not be directly accessed externally. Names prefixed with double underscore `__` indicate private names that should not be directly accessed externally.

  ## Inheritance

Inheritance is an important feature in object-oriented programming. It allows us to define a new class that inherits attributes and methods from one or more existing classes. The inherited class is called the parent class (or base class), and the inheriting class is called the child class (or derived class).

The main purpose of inheritance is to achieve code reuse. Through inheritance, the child class can inherit attributes and methods of the parent class so that identical code does not need to be rewritten.

In Python, inheritance is achieved by specifying the parent class in parentheses after the class name when defining a class. Below is a simple inheritance example:

```python
class SchoolMember:
    '''Represents any school member.'''
    def __init__(self, name, age):
        self.name = name
        self.age = age
        print('(Initialized SchoolMember: {})'.format(self.name))

    def tell(self):
        '''Tell my details.'''
        print('Name:"{}" Age:"{}"'.format(self.name, self.age), end=" ")


class Teacher(SchoolMember):
    '''Represents a teacher.'''
    def __init__(self, name, age, salary):
        SchoolMember.__init__(self, name, age)
        self.salary = salary
        print('(Initialized Teacher: {})'.format(self.name))

    def tell(self):
        SchoolMember.tell(self)
        print('Salary: "{:d}"'.format(self.salary))


class Student(SchoolMember):
    '''Represents a student.'''
    def __init__(self, name, age, marks):
        SchoolMember.__init__(self, name, age)
        self.marks = marks
        print('(Initialized Student: {})'.format(self.name))

    def tell(self):
        SchoolMember.tell(self)
        print('Marks: "{:d}"'.format(self.marks))

t = Teacher('Mrs. Shrividya', 40, 30000)
s = Student('Swaroop', 25, 75)

# prints a blank line
print()

members = [t, s]
for member in members:
    # Works for both Teachers and Students
    member.tell()
```

In this example:

- When using inheritance, specify the base class name(s) in the tuple after the class name in the class definition (e.g. `class Teacher(SchoolMember):`).
- The base class `__init__` method needs to be explicitly called via `SchoolMember.__init__(self, name, age)`.
  - This is because the subclass `__init__` method overrides the base class `__init__` method.
  - If we want to call the base class `__init__` method in the subclass `__init__` method, we need to explicitly call it.
- Both `Teacher` and `Student` classes inherit from `SchoolMember` class. This means `Teacher` and `Student` classes can access attributes and methods of the `SchoolMember` class.
- For each subclass we define a `tell` method which overrides the base class `tell` method. This is called polymorphism, meaning different classes can produce different responses to the same method.
  - If `tell` method was not defined in subclasses, subclasses would inherit the base class `tell` method.
  - Python always calls subclass methods first, and searches up the inheritance chain for the method if not found.

## Summary

### Key Characteristics of Object-Oriented Programming

Key characteristics of object-oriented programming (OOP) are:

- Modularity: Each object can be viewed as an independent module with its own attributes (also called data members) and methods (also called member functions).
- Reusability: Object code can be reused wherever needed, code reuse can be achieved through inheritance, encapsulation, polymorphism etc.
- Extensibility: Inheritance and polymorphism mechanisms improve extensibility of programs.

::: {.callout-tip}
# Other Common Programming Paradigms

Procedural Programming: One of the earliest programming paradigms where main idea is to break down programs into a sequence of steps or functions, solving problems by defining data and execution steps of functions.

Functional Programming: Advocates writing pure functions, avoiding program state change and data mutability, seeking higher comprehensibility and lower bug rates.

Logic Programming: Writing programs by describing the logic of a problem, programs would then automatically deduce answers to solving the problem. Prolog is a logic programming language.
:::
