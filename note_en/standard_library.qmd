# Standard Library

The Python standard library comes with every Python installation and contains many useful modules including file handling, string processing, network communication, date/time handling, math/science, encryption etc.

Familiarizing with standard library modules can help us program faster and improve efficiency.

Let's explore some commonly used standard library modules.

## The `sys` Module

The `sys` module provides variables and functions for interacting with the Python interpreter.

### `sys.argv`

As we saw in @sec-sys, `sys.argv` is a list containing command line arguments.

We summarize again here:

- `sys.argv[0]` is the script name
- `sys.argv[1]` is the first argument
- `sys.argv[2]` is the second argument
- Length of `sys.argv` is number of command line arguments

A simple example:
```python
import sys

print(sys.argv)
```

### `sys.version`

`sys.version` contains Python interpreter version info.

```python
import sys

print(sys.version)
```
`sys` module has a tuple called `version_info` containing version info too.

### `sys.path`

`sys.path` is a list containing module search paths.

```python
import sys

print(sys.path)
```

## The `os` Module

The `os` module provides many functions to interact with the operating system.

Common operations include getting current working directory, changing directory, creating/deleting directories/files etc.


### `os.getcwd()`

`os.getcwd()` returns current working directory.

```python
import os

print(os.getcwd())
```

### `os.listdir()`

`os.listdir()` returns files and directories in the specified directory.

```python
import os

print(os.listdir())
```

### `os.mkdir()`

`os.mkdir()` creates a new directory.

```python
import os

os.mkdir(r'practical_code/standard_library/newdir')
```

### `os.remove()`

`os.remove()` deletes a file.

```python
import os

os.remove(r'practical_code/standard_library/newdir')
```

### `os.rmdir()`

`os.rmdir()` deletes a directory.

```python
import os

os.rmdir(r'practical_code/standard_library/newdir')
```

## The `logging` Module

The `logging` module provides a flexible way to record log information.

Basic `logging` module syntax:

```python
import logging

logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
```

Additionally, the `logging` module also provides configuration options like outputting log messages to specified locations, specifying log format, log level etc.

A slightly more complex example:

```python
import os
import logging

logging_file = os.path.join(os.getcwd(), 'practical_code/standard_library/logging.log')

print("Logging to", logging_file)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=logging_file,
    filemode='w'
)

logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
```

In the above sample code:

- `logging_file` is path to log file, configured here as `practical_code/standard_library/logging.log`
- `logging.basicConfig()` configures log format, level, output location etc.
- Functions like `logging.debug()`, `logging.info()`, `logging.warning()` etc record log messages
- `filemode='w'` opens log file in write mode, overwriting existing files if any
- `%(asctime)s`, `%(name)s`, `%(levelname)s`, `%(message)s` are log format placeholders for log timestamp, name, level and message respectively.

## Module of the Week Series

Besides the modules introduced above, there are many other useful standard library modules like debugging, testing, file handling, network communication, date/time handling, math/science, encryption etc.

Additionally, Doug Hellmann's [Python Module of the Week](https://pymotw.com/3/) is a great resource introducing many modules in the Python standard library.