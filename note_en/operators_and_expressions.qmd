
# Operators and Expressions

Operators are symbols or keywords used to perform specific operations. In Python, there are various types of operators, including arithmetic operators, comparison operators, logical operators, and more.

Operands are the data on which operators operate.

Expressions are combinations of operators and operands used to calculate and generate values. In Python, expressions can be simple arithmetic expressions or complex logical expressions.

For example, an example of an expression is `2 + 3`, where the operator is `+` and the operands are `2` and `3`.


## Operators
### 1. Arithmetic Operators:

- Addition Operator (`+`): Used to add two values. It can handle numeric values, strings, and lists, among other types.
- Subtraction Operator (`-`): Used to subtract one value from another. If the first operand is missing, it defaults to 0.
- Multiplication Operator (`*`): Used to multiply two values. When used with strings, it returns a string repeated a fixed number of times.
- Division Operator (`/`): Used to divide one value by another.
- Modulus Operator (`%`): Used to calculate the remainder of two values divided.
- Exponentiation Operator (`**`): Used to calculate the exponent of a value.
- Floor Division Operator (`//`): Used to calculate the integer part of the division of two values. The answer is rounded down to the nearest integer value; if either operand is a floating-point number, the answer will be a floating-point number.

```python
# Addition Operator
x1 = 2 + 3
print(x1)
x2 = "a" + "b"
print(x2)
# Subtraction Operator
y1 = 3 - 2
print(y1)
y2 = - 2
print(y2)
# Multiplication Operator
a1 = 5 * 6
print(a1)
a2 = "my" * 6
print(a2)
# Division Operator
b = 50 / 25
print(b)
# Modulus Operator
c1 = 26 % 3
print(c1)
c2 = -25.5 % 2.25
print(c2)
# Exponentiation Operator
d= 2 ** 3
print(d)
# Floor Division Operator
e1 = 28 // 3
print(e1)
e2 = 9//1.8
print(e2)
```
### 2. Comparison Operators:

- Equality Operator (`==`): Used to check if two values are equal.
- Inequality Operator (`!=`): Used to check if two values are not equal.
- Greater Than Operator (`>`): Used to check if one value is greater than another.
- Less Than Operator (`<`): Used to check if one value is less than another.
- Greater Than or Equal Operator (`>=`): Used to check if one value is greater than or equal to another.
- Less Than or Equal Operator (`<=`): Used to check if one value is less than or equal to another.

```python
a = 1 == 1
print(a)
b = 1 != 1
print(b)
c = 2 > 1
print(c)
d = 2 < 1
print(d)
e = 2 >= 2
print(e)
f = 1 <= 2
print(f)
```
### 3. Logical Operators (Boolean Operators):

- And Operator (`and`): Used to check if multiple conditions are all true. The result is true only when all conditions are true.
- Or Operator (`or`): Used to check if at least one condition is true. The result is true as long as one condition is true.
- Not Operator (`not`): Used to negate a condition.

```python
# Logical AND operator (and): The result is true only when all conditions are true
a = True and True
print(a)  # Output: True

b = True and False
print(b)  # Output: False

# Logical OR operator (or): The result is true as long as one condition is true
c = True or False
print(c)  # Output: True

d = False or False
print(d)  # Output: False

# Logical NOT operator (not): Negates the condition
e = not True
print(e)  # Output: False

f = not False
print(f)  # Output: True
```

#### Short-circuit evaluation:

When using logical operators (such as and and or) to connect multiple conditional expressions, Python determines whether to evaluate all conditions based on the characteristics of the operator.

- In the case of the and operator, if any condition is False, the entire expression will be False, and Python will stop evaluating the remaining values and immediately return False.
- In the case of the or operator, if any condition is True, the entire expression will be True, and Python will stop evaluating the remaining values and immediately return True.
Short-circuit evaluation can improve code efficiency and performance by avoiding unnecessary computations and evaluations.

```python
# Example of short-circuit evaluation
a = 4
b = 0

if b != 0 and a / b < 1:
    print("Condition is satisfied")
else:
    print("Condition is not satisfied")
```
In the above example, short-circuit evaluation is used to skip the division by zero operation (`a / b`) as the overall result is determined to be False at the step `b != 0`. This avoids the error that would occur if the division operation was executed without short-circuit evaluation.

### 4. Bitwise Operators:

Bit: The smallest unit for storing and processing data. A bit can only hold two possible values: 0 or 1. Numbers in a computer are stored in binary form, which consists of 0s and 1s.

Bitwise Shift: Bitwise shift is an operation used to modify the value of a number by shifting its bits. There are two types of bitwise shifts: left shift and right shift. Left shift adds a 0 to the right end of the number, while right shift removes the rightmost bit.

- In decimal, shifting one place to the left (adding a 0 at the end) is equivalent to multiplying by 10, and shifting one place to the right (removing the rightmost digit) is equivalent to dividing by 10.
- In binary, shifting one place to the left (adding a 0 at the end) is equivalent to multiplying by 2, and shifting one place to the right (removing the rightmost bit) is equivalent to dividing by 2.

Bitwise Operators:

- Bitwise AND Operator (`&`): Performs a bitwise AND operation on two values. If both corresponding bits are 1, the result is 1; otherwise, it is 0.
- Bitwise OR Operator (`|`): Performs a bitwise OR operation on two values. If at least one of the corresponding bits is 1, the result is 1; otherwise, it is 0.
- Bitwise XOR Operator (`^`): Performs a bitwise XOR operation on two values. If one of the corresponding bits is 1 and the other is 0, the result is 1; otherwise, it is 0 (i.e., the result is 0 if both bits are the same).
- Bitwise NOT Operator (`~`): Performs a bitwise NOT operation on a value. It flips each bit, changing 0 to 1 and 1 to 0. The bitwise NOT of x is -(x+1).
- Left Shift Operator (`<<`): Shifts a value to the left by a specified number of bits.
- Right Shift Operator (`>>`): Shifts a value to the right by a specified number of bits.

```python
# Define two variables
a = 60  # The binary representation of 60 is 0011 1100
b = 13  # The binary representation of 13 is 0000 1101

print(a, "in binary is", bin(a))
print(b, "in binary is", bin(b))

print("a & b =", a & b)  # Bitwise AND operation. The binary result is 0000 1100, which is 12 in decimal
print("a | b =", a | b)  # Bitwise OR operation. The binary result is 0011 1101, which is 61 in decimal
print("a ^ b =", a ^ b)  # Bitwise XOR operation. The binary result is 0011 0001, which is 49 in decimal
print("~a =", ~a)  # Bitwise NOT operation. The binary result is 1100 0011, which is -61 in decimal (note: it is a negative number)

print("a << 2 =", a << 2)  # Left shift operation by 2 bits. The binary result is 1111 0000, which is 240 in decimal
print("a >> 2 =", a >> 2)  # Right shift operation by 2 bits. The binary result is 0000 1111, which is 15 in decimal
```
### 5. Assignment Operatorï¼š

- Addition Assignment Operator (`+=`): Used to add a value to a variable and assign the result to that variable.
- Subtraction Assignment Operator (`-=`): Used to subtract a value from a variable and assign the result to that variable.
- Multiplication Assignment Operator (`*=`): Used to multiply a value with a variable and assign the result to that variable.
- Division Assignment Operator (`/=`): Used to divide a value by a variable and assign the result to that variable.
- Modulus Assignment Operator (`%=`): Used to calculate the remainder of two values divided and assign the result to a variable.
- Exponentiation Assignment Operator (`**=`): Used to calculate the exponent of a value and assign the result to a variable.
- Floor Division Assignment Operator (`//=`): Used to calculate the integer part of two values divided and assign the result to a variable.

```python
# Simple Assignment Operator (=)
a = 10
print("a =", a)  # Output: a = 10

# Addition Assignment Operator (+=)
a += 2
print("a =", a)  # Output: a = 12

# Subtraction Assignment Operator (-=)
a -= 2
print("a =", a)  # Output: a = 10

# Multiplication Assignment Operator (*=)
a *= 2
print("a =", a)  # Output: a = 20

# Division Assignment Operator (/=)
a /= 2
print("a =", a)  # Output: a = 10.0

# Modulus Assignment Operator (%=)
a %= 3
print("a =", a)  # Output: a = 1.0

# Exponentiation Assignment Operator (**=)
a **= 3
print("a =", a)  # Output: a = 1.0

# Floor Division Assignment Operator (//=)
a = 10
a //= 3
print("a =", a)  # Output: a = 3

```
## Expressions

An expression is a combination of operators and operands used to calculate and generate values.

In Python, expressions can be simple arithmetic expressions or complex logical expressions.

For example, here are some common examples of expressions:

- Arithmetic expression: 2 + 3 * 4
- Logical expression: (x > 5) and (y < 10)
- String concatenation expression: 'Hello' + 'World'
- List comprehension expression: [x for x in range(10) if x % 2 == 0]

The value of an expression is calculated based on the types of operands and the rules of operators. When evaluating an expression, Python determines the order of operations based on certain precedence and associativity rules.

### Order of Evaluation

Similar to how multiplication has higher precedence than addition in mathematics, expressions in Python also have different levels of precedence. Python evaluates operators and expressions with higher precedence first, and then evaluates expressions with lower precedence.

For complex expressions, although you can rely on remembering the precedence rules to ensure the correct order of operations, it is generally recommended to use parentheses explicitly to indicate the order of evaluation for clarity and readability.

In cases where operators have the same precedence, the order of evaluation is determined by their associativity. Associativity can be left-associative or right-associative.
    - Left-associative means evaluation proceeds from left to right. Common examples include arithmetic operators (such as addition, subtraction, multiplication, division, etc.), comparison operators, and most bitwise operators.
    - Right-associative means evaluation proceeds from right to left. Common examples include exponentiation operator, assignment operator (`=`), and compound assignment operators (such as `+=`, `-=`, `*=`, `/=`, `%=`, `**=`, `//=`, `&=`, `^=`, `>>=`, `<<=`).

```python
# Left-associative
print(1 - 2 + 3)  # Output: 2

# Right-associative
# For the exponentiation operator, Python evaluates from right to left
# So it first calculates 4**2, which is 16, and then calculates 2**16
print(2 ** 4 ** 2)  # Output: 65536
# Explicitly specify the order of evaluation
print((2 ** 4) ** 2)  # Output: 256

```

### Mathematical Operations and Shortcut for Assignment

A common practice is to perform mathematical operations on variables and then assign the result back to the variable, and there is a shortcut for this type of expression.
```python
a = 2
a = a * 3
print("a =", a)

b = 2
b *= 3
print("b =", b)
```
