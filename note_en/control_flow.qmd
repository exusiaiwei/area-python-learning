# Control Flow

Control flow is a mechanism in programming languages that controls the order of program execution. It allows programs to decide which code blocks to execute based on conditions or other factors.

In Python, common control flow structures include:

- Conditional statements (`if-else` statements)
- Loop statements (`for` loops and `while` loops)
- Jump statements (`break` statements and `continue` statements)

`if-else` statements are used to execute specific code blocks when certain conditions are met.

`for` loops and `while` loops are loop structures in Python. `for` loops are used to iterate over elements in an iterable object, while `while` loops are used to repeatedly execute a code block as long as a condition is true.

`break` statements and `continue` statements are jump statements in Python. `break` statements are used to exit a loop when a specific condition is met, while `continue` statements are used to skip the remaining part of the current iteration and move on to the next iteration when a specific condition is met.

The flexibility of control flow allows programs to perform different operations based on different conditions and requirements, enabling more complex logic and functionality.

## `if` Statement

Conditional statements allow different code blocks to be executed based on the truth or falsehood of a condition. The `if` statement is used to execute a code block when a condition is true, while the `else` statement is used to execute a code block when a condition is false.

```python
# The sample code comes from A Byte of Python
# Here we define the guess value directly, instead of obtaining it through input
# This is because environments like Quarto and Jupyter Notebook can't handle intermediate input (input function)
# Such environments are designed to execute code in bulk. Once all cells start executing, they can complete all runs without human intervention
# Therefore, we directly set a value here, instead of obtaining it through input
guess = 20

number = 23

print('Your guess is:', guess)

if guess == number:
    print('Congratulations, you guessed it right.')
    print('(But you did not win any prize!)')
elif guess < number:
    # Another code block
    print('No, it is a little bit larger than that.')
    # You can do anything you want to do in the code block...
else:
    print('No, it is a little bit smaller than that.')
    # You will only get here if your guess is greater than number

print('Done')
# This last statement will always be executed,
# after if statement.

# If you want to obtain user input in other environments (such as standard Python environment or IDLE),
# You can change the fifth line of code to "guess = int(input('Enter an integer:'))".
# This way, you can receive user input as the value of 'guess', and then perform subsequent judgement.
```

The knowledge points in the example code:

- The `input` function prints a string to the screen and waits for input. After the input is entered, the `input()` function returns the input as a string.
- `int` is a class, and here it is used to convert a string to an integer. If you need to convert to a float, you can use `float`.
- Indentation is used to classify statements into different code blocks. Consistent indentation should be followed.
- `if`, `elif`, and `else` statements must have a colon at the end of the logical line, followed by the corresponding code block.
- The `elif` statement combines two related `if` `else-if` `else` statements into a single `if-elif-else` statement. It can simplify the program and reduce indentation.
- It is possible to nest one `if` statement inside another `if` statement, which is called a nested `if` statement.
- `elif` and `else` statements are optional. An `if` statement can be effective with only the `if` part.

## `while` Statement

The `while` statement allows a set of statements to be repeatedly executed as long as a condition is true. The `while` statement is a type of loop statement and can include an optional `if` statement.

```python
# The sample code comes from A Byte of Python
number = 23
running = True

# As we can't use input() function in Quarto or Jupyter Notebook, we set up a preset guess list here
guesses = [20, 25, 23]
guesses_iter = iter(guesses)  # Create an iterator

while running:
    # In Quarto and Jupyter Notebook, 'input()' function needs to be rewritten as iterating guess value from preset list
    guess = next(guesses_iter)
    print('Your guess is:', guess)

    if guess == number:
        # If the guess value equals to set value, it will print that you guess right and end the while loop
        print('Congratulations! You guess it right.')
        running = False
    elif guess < number:
        # It will also show that the preset guess value is too low
        print('No, it is a little higher than that.')
    else:
        # It will also show that the preset guess value is too high
        print('No, it is a little lower than that.')

print('Done')

# When the iterator 'guesses_iter' traverse all guesses, the program will end
# If you are running it in a real Python environment or IDLE, you can comment out the line 'guess = next(guesses_iter)'
# and uncomment the line 'guess = int(input('Enter an integer : '))', and also comment out 'guesses' and 'guesses_iter'
# Then it can achieve the continuous guessing of the user through the user input and continuous while loop
```

The knowledge points in the example code:

- By setting the variable `running` to `True` before the `while` loop, the program checks if the variable `running` is `True` before executing the corresponding `while` block.
- After executing the block, the condition (i.e., the variable `running`) is checked again.
- If the condition is true, the `while` block is executed again.
- If the condition is false, the optional `else` block is executed, and then the next statement is continued.
- If a `while` loop has an `else` clause, it will always be executed unless the loop is exited using a `break` statement.
- `True` and `False` are called boolean types and can be considered as equivalents of the values 1 and 0, respectively.

## `for` Loop

The `for..in` statement is another type of loop statement that iterates over an object sequence, i.e., it iterates over each item in the sequence one by one.

At this point, a sequence can be seen as an ordered collection of items.

```python
# Example code from A Byte of Python
for i in range(1, 5):
    print(i)
else:
    print('The for loop is over')
```

The knowledge points in the example code are as follows:

- The built-in function `range` can generate a sequence of numbers.
- By default, the step size of `range` is 1. The third number provided to `range` will be the step size, for example, `range(1,5,2)` gives `[1,3]`. The second number (i.e., the end number) is not included.
- `range` generates only one number at a time. If you need the complete list of numbers, you need to call `list()`.
- The `else` part in a `for` loop is optional. If included, it will always be executed unless the loop is exited using the `break` statement.
- Although the example code only demonstrates a list of numbers, the `for` loop can be used with sequences composed of objects of any type.

## `break` statement

The `break` statement is called a jump statement, which can stop the execution of a loop statement even if the loop condition is not False or the sequence of items has not been fully iterated.

If a `for` or `while` loop is exited using `break`, the corresponding `else` block of the loop will not be executed.

```python
# The sample code comes from A Byte of Python
# Set up a preset input list
inputs = ['Hello', 'abcdef', '12345', 'quit']

# Create an iterator
inputs_iter = iter(inputs)

while True:
    # Get the input from the preset input list
    s = next(inputs_iter)

    print('The input string is: ', s)
    if s == 'quit':
        break
    print('The length of the string is', len(s))
print('Done')

# Here we use a preset input list and iterator to simulate user input
# In each loop, we get an input from the list and check whether the input is 'quit'. If yes, we break the loop.
# Otherwise, we print out the length of the input
# This way, we can run the code in an environment like Quarto or Jupyter Notebook that does not support input()
# If you want to run it in a real Python environment or IDLE,
# you can comment out the line 's = next(inputs_iter)', uncomment the line 's = input('Enter something: ')',
# also comment out 'inputs' and 'inputs_iter', and it will be back to its original state.
```

The knowledge points in the example code are as follows:

- The built-in function `len` can measure the length of an input string.
- The `break` statement can also be used with a `for` loop.

## `continue` statement

The `continue` statement is used to skip the remaining statements in the current loop block and continue with the next iteration of the loop.

```python
# The sample code comes from A Byte of Python
# Set up a preset input list
inputs = ['Hello', 'abcdef', '12', '1234', 'quit']

# Create an iterator
inputs_iter = iter(inputs)

while True:
    # Get input from the preset input list
    # s = input('Enter something : ')
    s = next(inputs_iter)

    print('The input string is: ', s)
    if s == 'quit':
        break
    if len(s) < 3:
        print('Too short')
        continue
    print('Input length is sufficient')
    # You can do anything you want to do in the code block...
print('Done')

# This code can run smoothly in both Quarto and Jupyter environments. In each loop,
# it will get an input from the preset string list and then perform different operations based on the length of this input:
# 1. If the input is 'quit', then it will end the entire loop;
# 2. If the length of the input is less than 3, then it will print 'Too short', and skip the rest of the current loop, and directly start the next loop;
# 3. If the length of the input is not less than 3, then it will print 'Input length is sufficient'.
```
