# Basic

## Literal Constants

Literal constants are fixed values that are directly written in the code and do not change during program execution.

In Python, there are several types of literal constants, including:

- Numeric literals: integers, floating-point numbers, and complex numbers.
- String literals: sequences of characters enclosed in single quotes ('') or double quotes ("").
- Boolean literals: True and False.
- None: a special constant that represents the absence of a value.

Literal constants are used to assign values to variables, perform calculations, and define conditions in Python programs.

They provide a way to represent fixed values directly in the code, making the program more understandable and maintainable.

```python
x = 10  # Assign an integer literal to the variable
y = 3.14  # Assign a float literal to the variable
name = 'John'  # String enclosed in single quotes
message = "Hello, world!"  # String enclosed in double quotes
is_active = True  # Assign a boolean literal to the variable
empty_value = None  # Assign a None literal to the variable
```

## String

The string is a data type used to represent text data.

Features:

- In Python, you can specify a string with single or double quotes.
- Triple quotes can be used to specify a multi-line string.
- The value of a string cannot be modified.

```python
# Create a string
name = "Alice"

# Concatenate strings
greeting = "Hello, " + name + "!"

# Print the string
print(greeting)  # Output: Hello, Alice!

# Get the length of the string
length = len(name)
print(length)  # Output: 5

# Slice the string
substring = name[1:3]
print(substring)  # Output: li

# Replace in the string
new_name = name.replace("A", "B")
print(new_name)  # Output: Blice
```

### String formatting function

The format function of a string can pass the corresponding parameters into the string.

- The placeholder is `{}`
- Can specify the insertion order by index, python counts from 0.
- Parameters can be named.


```python
name = "Alice"
age = 25

# Use placeholders to insert variables
greeting = "Hello, my name is {} and I am {} years old.".format(name, age)
print(greeting)  # Output: Hello, my name is Alice and I am 25 years old.

# You can specify the order of insertion by index
greeting2 = "Hello, my name is {1} and I am {0} years old.".format(age, name)
print(greeting2)  # Output: Hello, my name is Alice and I am 25 years old.

# You can use keyword parameters to specify the value to be inserted
greeting3 = "Hello, my name is {name} and I am {age} years old.".format(name="Alice", age=25)
print(greeting3)  # Output: Hello, my name is Alice and I am 25 years old.
```

## Escape Sequences

Escape sequences are a special sequence of characters that start with a backslash (`\`) and are followed by one or more characters. They are used to represent non-printing characters, special characters, or characters with special meanings.

Escape sequences start with a backslash (`\`) and are followed by one or more characters to represent a specific character or operation. By using escape sequences, we can insert these special characters into strings, rather than interpreting them as ordinary characters.

Definition and Characteristics of Escape Sequences:

- Escape sequences start with a backslash (`\`).
- Escape sequences are formed by one or more characters.
- Escape sequences are used to represent non-printing characters, special characters, or characters with special meanings.
- Escape sequences can be used in strings, character constants, regular expressions, and other contexts.

Here are some common escape sequences and what they represent:

- `\n`: newline
- `\t`: tab
- `\r`: carriage return
- `\'`: single quote
- `\"`: double quote
- `\\`: backslash


```python
# Using escape sequences to represent special characters in strings:
print("Hello\tWorld")  # Output: Hello    World
print("I\'m a programmer")  # Output: I'm a programmer
print("She said, \"Hello!\"")  # Output: She said, "Hello!"
print("\"I love you.\" \n \"Me too.\"")

# Using escape sequences to match special characters in regular expressions:
import re
pattern = r"\d+"  # Matches one or more digits
result = re.findall(pattern, "12345")
print(result)  # Output: ['12345']
```


## Variables

A variable is a concept in Python that is used to store and manipulate data. It can store various types of data, such as integers, floating-point numbers, strings, etc.

Features:

- You can store data in a variable via an assignment operation.
- You can use the variable name to access the data stored in the variable.
- The value of a variable can be modified at any time.
- Variables can be used and passed at different locations in a program.
- The scope of a variable can be limited within a specific block of code.


```python
i = 5
print(i)

e = ( i + 1 ) * 2

print(e)

s = '''This is a multi-line string.
This is the second line.'''

print(s)
```

## Execution Logic

### Logical Lines and Physical Lines

A logical line refers to a line in the code that represents a statement or command, while a physical line refers to the text that actually occupies a line in the code file.

A logical line can span multiple physical lines by connecting multiple physical lines into one logical line using line connectors (`\`). A physical line is the actual number of lines in the code file, with each physical line ending with a newline character (`\n`).

Features of Logical Lines:

- A logical line can contain one or more statements or commands.
- Logical lines can span multiple physical lines.
- A logical line ends with a newline character (`\n`).

Features of Physical Lines:

- Physical lines are the actual number of lines in the code file.
- Each physical line ends with a newline character (`\n`).

Python encourages each physical line to correspond to one logical line, that is, one statement per line, to ensure code readability.


```python
# Example of a logical line spanning multiple physical lines
x = 1 + \
    2 + \
    3

print(x)

# Example of logical lines being the same as physical lines
y = 5
print(y)

y = 5;
print(y);

y = 5; print(y);

y = 5; print(y)

```

### Indentation

Indentation is a syntax rule in Python used to represent the hierarchical structure of the code blocks. In Python, the indentation is mandatory and it determines the execution order and logical relations of the code. The level of indentation of the logical lines determines the grouping of the statements. Statements in the same group form a block of code.

Basic Concepts:

- Indentation is achieved through the use of spaces or tabs.
- The amount and style of indentation must remain consistent, typically four spaces are recommended for indentation.
- The hierarchal structure of the indentation determines the nesting relation of the code blocks.

Features:

- Indentation is used to define code blocks for functions, loops, conditional statements, and more.
- Indentation can enhance the readability and maintainability of the code.
- Indentation errors can lead to syntax errors or logical errors.

Code Example:
Here is one example where indentation forms blocks of code:

```python
def greet(name):
    if name == "Alice":
        print("Hello, Alice!")
    else:
        print("Hello, stranger!")

greet("Bob")
```
